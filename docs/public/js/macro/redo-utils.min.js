/* Redo Utils, By BlackStar, Ver.0.4.1 */
(()=>{"use strict";const repalceText=text=>text.toString().toLowerCase().replace(/['".]/g,"").replace(/^[$_]/,"").trim();const getRadioBtnName=text=>`[name='radiobutton-${repalceText(text)}']`;const getListBoxName=text=>`[name='listbox-${repalceText(text)}']`;const addListener=(entity,getName,raw=true)=>{if(entity.args<1){return this.error("Not enough arguments provided. At least one argument is required.")}const part=raw?entity.args.raw.splitOrEmpty(/\s+/).first():entity.args[0];const tags=entity.args.length>1?String(entity.args[1]).trim().splitOrEmpty(/\s+/):[];$(document).on(":passagedisplay",(()=>handleChange(part,tags,entity,getName)))};const addListeners=(entity,getName,raw=true)=>{const parts=raw?entity.args.raw.splitOrEmpty(/\s+/):entity.args;$(document).on(":passagedisplay",(()=>{for(const part of parts){handleChange(part,[],entity,getName)}}))};const handleChange=(part,tags,entity,getName)=>{const partName=getName(part);$(partName).change((()=>{const failRE=/^(?:do|for)$/;const passRE=/^(?:button|link(?:append|prepend|replace)?)$/;const closest=entity.contextFind((ctx=>failRE.test(ctx.name)||passRE.test(ctx.name)));if(closest&&failRE.test(closest.name)){return entity.error(`must not be used directly within macro <<${closest.name}>>`)}triggerEvent(":redo",document,{detail:{tags:tags}})}))};Macro.add("changes",{handler(){addListeners(this,(part=>part),false)}});Macro.add("change",{handler(){addListener(this,(part=>part),false)}});Macro.add("redo_radio",{handler(){addListener(this,getRadioBtnName)}});Macro.add("redo_list",{handler(){addListener(this,getListBoxName)}});Macro.add("redos_radio",{handler(){addListeners(this,getRadioBtnName)}});Macro.add("redos_list",{handler(){addListeners(this,getListBoxName)}})})();
/* End Redo Utils */