/* Expr Parser, By BlackStar, Ver.0.2.0 */
(()=>{const parseExpr=expr=>{const match=expr.match(/(\d*)[dD](\d+)/);if(!match)return 0;const num=parseInt(match[1],10)||1;const dice=parseInt(match[2],10);return Array.from({length:num}).map((()=>randomInt(1,dice)))};const rollWithDetails=expr=>{const diceRolls=[];const replaced=expr.replace(/(\d*[dD]\d+)/g,(match=>{const rolls=parseExpr(match);diceRolls.push(...rolls);return rolls.reduce(((sum,roll)=>sum+roll),0)}));return[eval(replaced),diceRolls]};const rollDice=expr=>rollWithDetails(expr)[0];Macro.add("evelexpr",{tags:null,handler(){if(this.args.length===0){return this.error("No provide expr")}const expr=this.args[0];if(typeof expr!=="string"){return this.error("Please provide string")}const[result,rolls]=rollWithDetails(expr);WikiVars({result:result,rolls:rolls},this)}});setup.rollDice=rollDice;window.rollDice=window.rollDice||rollDice})();
/* End Expr Parser */